name: Flask API Docker CI/CD

on:
  push:
    branches:
      - main  # Change this to 'main' if that's your default branch
  pull_request:
    branches:
      - main  # Change this to 'main' if that's your default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt

    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest --maxfail=1 --disable-warnings -q

    - name: Lint code with flake8
      run: |
        source .venv/bin/activate
        pip install flake8
        flake8 .

  docker_build:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build . --file Dockerfile --tag my-image-name:$(date +%s)

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push my-image-name:$(date +%s)

  run_services:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
    - name: Set up Docker
      run: |
        sudo apt-get update
        sudo apt-get install docker.io
        sudo systemctl enable docker
        sudo systemctl start docker

    - name: Run Jaeger
      run: |
        sudo docker run -d --name jaeger \
          -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \
          -p 5775:5775/udp \
          -p 6831:6831/udp \
          -p 6832:6832/udp \
          -p 5778:5778 \
          -p 16686:16686 \
          -p 14268:14268 \
          -p 9411:9411 \
          jaegertracing/all-in-one:1.6.0

    - name: Run Grafana
      run: |
        sudo docker run -d -p 3000:3000 --network host --name=grafana grafana/grafana

  deploy:
    runs-on: ubuntu-latest
    needs: run_services
    if: github.ref == 'refs/heads/main' # Only deploy from main branch
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server (example)
      run: |
        # Deploying to a server 
        echo "Deploying to server..."
